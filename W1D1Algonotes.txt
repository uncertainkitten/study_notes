Questions to answer:
 How do we define a graph mathematically?

 G = (V, E), where G is the graph and V = set of vertices and E = set of edges.  We use an ordered pair system based on these values.

 What is the difference between directed, undirected, weighted, and unweighted?

 A directed graph is a graph with a set of ordered pair edges, going from (origin, destination)

 an undirected graph is a graph with a set of unordered pair edges - it's assumed bidirectional since origin/destination doesn't matter

 A weight graph is a graph where the weights/costs of a given edge are tracked - i.e., traversing an edge might cost 2 units instead of one
 This can change path cost algorithms

 An unweighted graph is a weighted graph where the cost of all traversals is equal

 Give an example of various types of graphs (Weighted Undirected, Unweighted Directed, Unweighted Undirected, etc.)

 Weighted Undirected - A road map of highways, where all roads are two ways but different lengths

 Weighted Directed - An intercity road map, where some roads are one way, but all roads might have different lengths

 Unweighted Directed - The world wide web - all links are the same value, but they are not guaranteed to be bidirectional
 You linking to a site does not mean it links you

 Unweighted Undirected - Facebook - If you are friends with someone, they are friends with you, and there's no asymmetry
 in the value of these connections

 What makes a graph a simple graph? What attributes would make it not simple?
  A graph is a simple graph if it has no self loops or parallel edges - if it does have a self loop (a vertex with an edge pointing to itself) or
  parallel edges (multiple edges )
 What is the maximum number of edges in a directed simple graph? Undirected simple graph? Answer should be in terms of N
 Describe the levels of connectivity a graph can have (strongly connected, weakly connected).
 What are cycles?
 What are some naive ways we can store and traverse graphs? Be able to discuss time/space complexity of these approaches, and what issues we may face.

 

 Graphs - type can be defined by what type of edge they have (directed, non directed)
 Graphs have no root node or restrictions on links/edges back and forth
 Directed edges - an edge goes from an origin to a destination - cannot go the other way
 Graphs with directed edges - directed graphs/digraphs
 Graphs without directe edges - undirected graph

Social graphs are bidirectional/undirected on abstractions such as facebook 
(however, irl, they are sometimes directed and sometimes not given the levels of permissions people put on relationships)
Social Graphs on Twitter are directed - you can follow someone but they do not have to follow you back

Graphs are nonlinear and nonhierarchial structures

The difference between a directed and undirected graph is whether the Edges are a set of ordered pairs or unordered pairs of vertices

When you model things as graphs, you get access to certain algorithms to solve problems - i.e., Facebook could suggest friends based off friends of friends
(i.e., find all nodes having length of shortest path from Rama equal to 2.  You can also make 2 into k instead with recursion)

Web crawlers are an algorithm that use directed graph traversing.

Weighted graphs - Lets say you wanted to represent a road network - the roads are different lengths, so you assign a value/cost to traversing a given
edge.

Unweighted graph - a weighted graph where the weight of all edges is equal
An undirected graph can also be modeled as a directed graph with directed edges in both directions (i.e. (V1, V2), (V2, V1))

An edge that refers to same vertex is a self loop (i.e. (V1, V1))
Multiedge - if it occurs more than once in a graph (i.e. (V1, V2), (V1, V2) OR {V1, V2}, {V2, V1})
Used for things where, say, you have a graph of flights with cities as vertices - you might want multiple edge connections with different costs and times

Simple graphs - have no self loops or multiedges
Max number of edges on directed graphs (n(n-1))
Max number of edges on undirected graphs (n(n-1)) / 2

Dense graphs are graphs with close to max edges
Sparse graphs are graphs with close to min edges
Dense graphs are usually stored as adjacency matrixes - sparse graphs are stored as adjacency lists
Simple path - where vertices and edges are not repeated
Path - sequence of vertices in which each step is connected by an edge
Walk - sequence of vertices from point A to point B
Trail - sequence of vertices from point A to point B in which no edges are repeated but vertices might be
Strongly connected graph - Paths from any vertex to any other vertex
In a directed graph - weakly connected graph has connections between all vertices, but not necessarily connections from any vertex to any other vertex
Connected graph - connected to all vertices in an undirected graph, but no strict path between all vertices
Closed walk - starts and ends at same vertex
Simple cycle - no repetition of vertices besides start and end vertex
A graph with no cycle - acyclic graph (i.e. tree)
Directed Acyclic Graph - has no path of length greater than 0 that doesn't repeat a vertex

Edge List
To build a graph in code - have a list of Vertices and a list of Edges
Vertex list is a list of names for the vertices
Edge list is a list of objects with two entries - start vertex and end vertex (or just two vertices)
If graph is weighted, you add a cost to the Edge class

You can optimize your edge list by using pointers to the indices of the vertices rather than the direct copy of the name
Time complexity of naive adjacency search and such is O(n(n-1)), or O(n^2)












