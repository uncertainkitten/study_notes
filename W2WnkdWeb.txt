What is a CSRF Attack?
How can you prevent CSRF Vulnerabilities?


What is CSRF?  Cross Site Request Forgery
CSRF attacks only allow for state changes to occur and cannot cater attacks that require the attacker receiving the contents of the HTTP Request
CSRF attacks are ones in which an attacker tricks the victim into performing actions on the behalf of the attacker
There are two steps:
1. The attacker tricks the victim into clicking a link or loading up a page
2. Send a crafted request in the victim's browser which will send a legitimate looking request to the web application - this request
is sent with any values the attacker wants, and any cookies that exist in the victim's browser

CSRF is only effective if the victim is authenticated - so the victim needs to be logged in for the attack to succeed. Resources that are publicly
accessible don't really suffer from CSRF attacks, since the privilege elevation does not confer any particular advantages

CSRF attacks using GET requests occur if a website, for some godforasken reason, uses GET requests and query parameters to change state - if an
attacker can get a user to click a link that has parameters intended to cause a change in state in favor of the attacker, utilizing the victim's
credentials, it is a CSRF attack

To CSRF attack with a POST request, the attacker needs to lure the victim onto their malicious web app, and then send a POST request when the app
loads, to the website you want to utilize the victim's credentials on.

Countering CSRF attacks:
A popular solution is a CSRF authenticity token, a token associated with a user that can be found as a hidden value on every state changing form
This is set up as follows:
- web server creates a token
- token is statically set as a hidden input on a protected form
- form is submitted by the user
- token is included in POST data
- web app compares the token generated by the web app with the token sent through the form
- If the tokens match, the request is valid 
- If they tokens don't match, the request is refused as invalid

The token does need to be cryptographically secure to work as an anti-CSRF measure, so that the token cannot be guessed from a predictable pattern.
Generally, frameworks will provide CSRF protection and the framework's protection is the safest bet to use

Another option is same-site cookies - This is a flag that can be set to only accept cookies being sent if the request is being made from the same
origin that is related to the cookie being sent.  The Cookie and the page from where the request is being made, are considered to have the same origin 
if the protocol, port (if applicable) and host is the same for both.

The main disadvantage of same-site cookies is that older browsers may not support them

