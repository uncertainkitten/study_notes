C - invented by Ken Thompson and Dennis Ritchie

Hello World in C:
#include <stdio.h>
int main(void){
  printf("Hello world");
  return 0;
}

Printing newlines in C:
#include <stdio.h>
int main(void){
    printf("Hello world!\n");
    printf("Have fun with this course!");
    return 0;
}

\ - begins an escape sequence
\n - new line
Note - you can do all this in one printf statement

Printing quotation marks:
#include <stdio.h>
int main(void){
    printf("Hello world!\n");
    printf("Have fun with \"this\" course!");
    return 0;
}

Use \ before the thing you want to escape and all is well

For loops in C:
#include <stdio.h>
int main(void) {
    int i = 0;
    for(i=0; i<9; i++){
        printf("Hello, world!\n");
    }
    return 0;
}

So define a variable, tell it how long to increment or decrement, and do your thing.
Hey look it is literally basically JavaScript

You can also run blocks of code in for loops (again, just like JavaScript, Ruby, whatever).  Do note that you can keep using the same fancy incrementing
variable - I _assume_ that i is scoped to the loop it's associated with (alternatively, every time you do i=0 in the first part of the loop, you're
resetting the value.  This would make more sense, probably.)

Example:
#include <stdio.h>
int main(void) {
    int i=0;
    for(i = 0; i < 3; i++) {
        printf("Blah");
        printf("Bleh");
        printf("Blih ");
    }
    printf("\n");
    for (i=0; i<6; i++) {
        printf("Bloh");
        printf("Bluh ");
    }
    return 0;
}

Commenting
You comment things with // on new line (again, just like Javascript)
You can also comment code at end of line with // like usual - and you can also just comment out code so
You can comment over multiple lines with /* */(just like CSS)
And you can have comments in comments by combining // and /* */

Structure of a C program
#include <stdio.h> - preprocessor directive (code that runs before code is compiled)
int main(void) - all programs need to have a "main" function, and can only have one main function
int i = 0; - variable declaration
executable statements (things like for loops, printfs, etc.)
return - end of the function

Printing integers
Well first - printf is a function, that takes in one parameter.  That parameter is a string of characters ("")
However, if you want to do fancy things, you can use %d
%d - format specifier, tells C what type of thing to put here (%d for integer)
You can use this to pass additional parameters to the printf function

#include <stdio.h>
int main(void){
    printf("If I have %d bills worth %d dollars each then I have %d dollars.",3,5,3*5);
    return 0;
}

Performing arithmetic w/ C
#include <stdio.h>
int main() {
    printf("3+2 equals %d and 3-2 equals %d and 3*2 equals %d\n", 3+2, 3-2, 3*2);
    printf("3+2*3 equals %d and (3+2)*3 equals %d\n", 3+2*3, (3+2)*3);
    printf("2*8-2*7-4 equals %d\n", 2*8-2*7-4);
    printf("2*(8-2*(7-4)) equals %d\n", 2*(8-2*(7-4)));
    printf("2*(8-2*7)-4 equals %d\n", 2*(8-2*7)-4);
    return 0;
}

Pretty straightforward, +, -, *, / didn't magically change

Storing integers in variables
Wait I literally already did this.
#include <stdio.h>
int main(void) {
    //Create a variable to store an integer value
    int age;
    //Assigne a value to that variable
    age = 47;
    printf("I am %d years old.\n", age);
    printf("In %d years, I will be %d years old.\n", 8, age+8);
    printf("%d years ago, I was %d years old.\n", 11, age-11);
    return 0;
}

You can initialize a variable by declaring type (int)
And then assign with =.  You know that.
Reassigning variables - you can just reassign with = after a variable is declared
#include <stdio.h>
int main() {
    int balance;//creating a variable containing integer values
    balance = 50;//assigning the value 50 into the balance variable
    printf("I have %d dollars in my account\n",balance);
    //expense of 40 dollars
    balance = balance - 40;
    printf("I have %d dollars in my account\n",balance);
    //add 20 dollars in my account
    balance = balance + 20;
    printf("I have %d dollars in my account\n",balance);
    //expense of 30 dollars
    balance = balance - 30;
    printf("I have %d dollar in my account\n",balance);
    return 0;
}

Note - the compiler in the MOOC automatically initializes integers to 0 - HOWEVER, you really should initialize your variables on the line you 
declare them.  Though there are use cases for not doing that (such as using scanf()).

#include <stdio.h>
int main(void) {
   int variable = 2; //variable declaration and initialization all in one step

   return 0;
}

Variable names: tl;dr - use explicit names, follow these rules:
    /* Variable names can use:
    lowercase and uppercase letters (characters) and digits
    do not use special characters like @ # & " ...
    do not use accented characters like é è à ...
    do not start with a digit
    start only with a letter
    spaces are forbidden
     _ may be used instead of a space in the name of the variable
    YouCanUseUppercaseLettersBetweenWordsInsteadOfSpaces   */

Using variables in loops - I bet this is gonna be about scope
Yeah basically - declare variables outside the loop, things happen to them in the loop.

#include <stdio.h>
int main(void) {
    int i;
    int numberOfHazelnuts = 0;
    int distanceTraveled = 0;
    for(i = 0; i < 9 ; i++) {
        printf("At %d miles I have %d hazelnuts.\n", distanceTraveled, numberOfHazelnuts);
        distanceTraveled = distanceTraveled + 1;
        numberOfHazelnuts = numberOfHazelnuts + 3;
    }
    return 0;
}

Oh god user input oh no
Read integer user input using scanf()
scanf() - first parameter format definition, second parameter &variable
#include <stdio.h>
int main() {
    int age;//DECLARE
    printf("Whare is your age ?\n");
    scanf("%d",&age);
    printf("You are %d years old\n", age);//USE
    return 0;
}

Assigning multiple variables at once with scanf()
#include <stdio.h>
int main(void) {
    int first, second, third;
    printf("Please enter three integers, separated by commas: ");
    scanf("%d,%d,%d", &first, &second, &third);
    printf("You entered: %d for first, %d for second, %d for third.\n", first, second, third);
    
    return 0;
}
